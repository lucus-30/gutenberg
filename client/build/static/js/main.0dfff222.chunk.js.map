{"version":3,"sources":["services/api.js","app.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","process","field","query","get","Header","Content","Option","initialState","isLoading","books","reducer","state","action","type","payload","SearchResults","dataSource","grid","gutter","column","renderItem","item","Item","title","label","authors","publication_date","split","reverse","join","subjects","publisher","App","children","useReducer","dispatch","console","log","length","className","style","background","Group","compact","margin","defaultValue","value","Search","placeholder","enterButton","width","onSearch","Api","then","data","catch","padding","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mRAEAA,IAAMC,SAASC,QAAUC,+BAGzB,IAIe,EAJA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,MACvB,OAAOL,IAAMM,IAAN,uBAA0BF,EAA1B,YAAmCC,KCFpCE,E,IAAAA,OAAQC,E,IAAAA,QACRC,E,IAAAA,OAEFC,EAAe,CACnBN,MAAO,QACPC,MAAO,GACPM,WAAW,EACXC,MAAO,IAGHC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,eACFF,EADL,CAEEV,MAAOW,EAAOE,UAElB,IAAK,YACH,OAAO,eACFH,EADL,CAEET,MAAOU,EAAOE,UAElB,IAAK,cACH,OAAO,eACFH,EADL,CAEEH,UAAWI,EAAOE,UAEtB,IAAK,YACH,OAAO,eACFH,EADL,CAEEH,WAAW,EACXC,MAAOG,EAAOE,UAElB,QACE,OAAOH,IAIPI,EAAgB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACtB,OACE,uBACEC,KAAM,CAAEC,OAAQ,GAAIC,OAAQ,GAC5BH,WAAYA,EACZI,WAAY,SAAAC,GAAI,OACd,sBAAMC,KAAN,KACE,uBAAMC,MAAOF,EAAKE,OAChB,uBAAcJ,OAAQ,GACpB,sBAAcG,KAAd,CAAmBE,MAAM,WAAWH,EAAKI,SACzC,sBAAcH,KAAd,CAAmBE,MAAM,oBAAoBH,EAAKK,iBAAiBC,MAAM,KAAKC,UAAUC,KAAK,MAC7F,sBAAcP,KAAd,CAAmBE,MAAM,WAAWH,EAAKI,SACzC,sBAAcH,KAAd,CAAmBE,MAAM,YAAYH,EAAKS,UAC1C,sBAAcR,KAAd,CAAmBE,MAAM,aAAaH,EAAKU,kBAmE1CC,EA1DH,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EACFC,qBAAWxB,EAASH,GADlB,mBACrBI,EADqB,KACdwB,EADc,KAE5BC,QAAQC,IAAI1B,GACZ,IAqBMF,EACJE,EAAMF,MAAM6B,OAAS,EAAI,kBAAC,EAAD,CAAetB,WAAYL,EAAMF,QAAY,KACxE,OACE,2BACE,kBAACL,EAAD,CAAQmC,UAAU,SAASC,MAAO,CAAEC,WAAY,SAC9C,sBAAOC,MAAP,CAAaC,SAAO,EAACH,MAAO,CAAEI,OAAQ,WACpC,uBAAQC,aAAa,SACnB,kBAACvC,EAAD,CAAQwC,MAAM,SAAd,SACA,kBAACxC,EAAD,CAAQwC,MAAM,WAAd,WAEF,sBAAOC,OAAP,CACEC,YAAY,oBACZC,aAAW,EACXT,MAAO,CAAEU,MAAO,OAChBC,SAnCY,SAAAjD,GACpBiC,EAAS,CACPtB,KAAM,cACNC,SAAS,IAEXsC,EAAW,CACTnD,MAAOU,EAAMV,MACbC,UAECmD,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPnB,EAAS,CACPtB,KAAM,YACNC,QAASwC,IAEXnB,EAAS,CACPtB,KAAM,cACNC,SAAS,OAGZyC,MAAMnB,QAAQC,UAoBf,uBAAQG,MAAO,CAAEgB,QAAS,gBACxB,kBAACnD,EAAD,CACEkC,UAAU,yBACVC,MAAO,CACLgB,QAAS,GACTZ,OAAQ,EACRa,UAAW,SAGZhD,MCvGSiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.0dfff222.chunk.js","sourcesContent":["import axios from \"axios\"\n\naxios.defaults.baseURL = process.env.REACT_APP_API_BASE_URL + \"/api/\"\n// axios.defaults.withCredentials = true\n\nconst Search = ({ field, query}) => {\n  return axios.get(`search/books/${field}/${query}`)\n}\n\nexport default {\n  Search\n}","import React, { useReducer } from \"react\"\nimport { Layout, Input, Select, List, Card, Descriptions } from \"antd\"\nimport Api from \"services/api\"\n\nconst { Header, Content } = Layout\nconst { Option } = Select\n\nconst initialState = {\n  field: \"title\",\n  query: \"\",\n  isLoading: false,\n  books: [],\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_FIELD\":\n      return {\n        ...state,\n        field: action.payload,\n      }\n    case \"SET_QUERY\":\n      return {\n        ...state,\n        query: action.payload,\n      }\n    case \"SET_LOADING\":\n      return {\n        ...state,\n        isLoading: action.payload,\n      }\n    case \"SET_BOOKS\":\n      return {\n        ...state,\n        isLoading: false,\n        books: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nconst SearchResults = ({dataSource}) => {\n  return (\n    <List \n      grid={{ gutter: 16, column: 4 }}\n      dataSource={dataSource}\n      renderItem={item => (\n        <List.Item>\n          <Card title={item.title}>\n            <Descriptions column={1}>\n              <Descriptions.Item label=\"Authors\">{item.authors}</Descriptions.Item>\n              <Descriptions.Item label=\"Publication Date\">{item.publication_date.split(\"-\").reverse().join(\"/\")}</Descriptions.Item>\n              <Descriptions.Item label=\"Authors\">{item.authors}</Descriptions.Item>\n              <Descriptions.Item label=\"Subjects\">{item.subjects}</Descriptions.Item>\n              <Descriptions.Item label=\"Publisher\">{item.publisher}</Descriptions.Item>\n            </Descriptions>\n          </Card>\n        </List.Item>\n      )}\n    />\n  )  \n}\n\nconst App = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  console.log(state)\n  const searchHandler = query => {\n    dispatch({\n      type: \"SET_LOADING\",\n      payload: true,\n    })\n    Api.Search({\n      field: state.field,\n      query,\n    })\n      .then(({ data }) => {\n        dispatch({\n          type: \"SET_BOOKS\",\n          payload: data,\n        })\n        dispatch({\n          type: \"SET_LOADING\",\n          payload: false,\n        })\n      })\n      .catch(console.log)\n  }\n  const books =\n    state.books.length > 0 ? <SearchResults dataSource={state.books} /> : null\n  return (\n    <Layout>\n      <Header className=\"header\" style={{ background: \"#fff\" }}>\n        <Input.Group compact style={{ margin: \"16px 0\" }}>\n          <Select defaultValue=\"title\">\n            <Option value=\"title\">Title</Option>\n            <Option value=\"authors\">Author</Option>\n          </Select>\n          <Input.Search\n            placeholder=\"input search text\"\n            enterButton\n            style={{ width: \"30%\" }}\n            onSearch={searchHandler}\n          />\n        </Input.Group>\n      </Header>\n      <Layout style={{ padding: \"0 24px 24px\" }}>\n        <Content\n          className=\"site-layout-background\"\n          style={{\n            padding: 24,\n            margin: 0,\n            minHeight: \"91vh\",\n          }}\n        >\n          {books}\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./app\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}